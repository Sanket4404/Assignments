A double-ended queue (deque) is a linear list in which additions and deletions may be made at either end. Obtain a data representation mapping a deque into a one- dimensional array. Write C++ program to simulate deque with functions to add and delete elements from either end of the deque.

//Progrom to illustrate double ended queue using array.
#include&lt;iostream&gt;
//#include
//#include
using namespace std;
#define SIZE 5
class dequeue
{
int a[10],front,rear,count;
public:
dequeue();
void add_at_beg(int);
void add_at_end(int);
void delete_fr_front();
void delete_fr_rear();
void display();
};
dequeue::dequeue()
{
front=-1;
rear=-1;
count=0;
}
void dequeue::add_at_beg(int item)
{
int i;
if(front==-1)
{
front++;
rear++;
a[rear]=item;
count++;
}
else if(rear&gt;=SIZE-1)
{
cout&lt;&lt;&quot;\nInsertion is not possible,overflow!!!!&quot;;
}
else
{
for(i=count;i&gt;=0;i--)
{
a[i]=a[i-1];
}
a[i]=item;
count++;

rear++;
}
}

void dequeue::add_at_end(int item)
{
if(front==-1)
{
front++;
rear++;
a[rear]=item;
count++;
}
else if(rear&gt;=SIZE-1)
{
cout&lt;&lt;&quot;\nInsertion is not possible,overflow!!!&quot;;
return;
}
else
{
a[++rear]=item;
}
}

void dequeue::display()
{
for(int i=front;i&lt;=rear;i++)
{
cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;; }

}
void dequeue::delete_fr_front()
{
if(front==-1)
{
cout&lt;&lt;&quot;Deletion is not possible:: Dequeue is empty&quot;;
return;
}
else
{
if(front==rear)
{
front=rear=-1;
return;
}
cout&lt;&lt;&quot;The deleted element is &quot;&lt;&lt;a[front];
front=front+1;
}

}
void dequeue::delete_fr_rear()
{
if(front==-1)
{
cout&lt;&lt;&quot;Deletion is not possible:Dequeue is empty&quot;;
return;
}
else
{
if(front==rear)
{
front=rear=-1;
}
cout&lt;&lt;&quot;The deleted element is &quot;&lt;&lt; a[rear];
rear=rear-1;
}
}

int main()
{
int c,item;
dequeue d1;
do
{
cout&lt;&lt;&quot;\n\n****DEQUEUE OPERATION****\n&quot;;
cout&lt;&lt;&quot;\n1-Insert at beginning&quot;;
cout&lt;&lt;&quot;\n2-Insert at end&quot;;
cout&lt;&lt;&quot;\n3_Display&quot;;
cout&lt;&lt;&quot;\n4_Deletion from front&quot;;
cout&lt;&lt;&quot;\n5-Deletion from rear&quot;;
cout&lt;&lt;&quot;\n6_Exit&quot;;
cout&lt;&lt;&quot;\nEnter your choice&lt;1-4&gt;:&quot;;
cin&gt;&gt;c;
switch(c)
{
case 1:
cout&lt;&lt;&quot;Enter the element to be inserted:&quot;;
cin&gt;&gt;item;
d1.add_at_beg(item);
break;
case 2:
cout&lt;&lt;&quot;Enter the element to be inserted:&quot;;
cin&gt;&gt;item;
d1.add_at_end(item);
break;

case 3:
d1.display();
break;
case 4:
d1.delete_fr_front();
break;
case 5:
d1.delete_fr_rear();
break;
case 6:
exit(1);
break;
default:
cout&lt;&lt;&quot;Invalid choice&quot;;
break;
}
}while(c!=7);
return 0;
}
